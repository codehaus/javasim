/*
 * Copyright 1990-2008, Mark Little, University of Newcastle upon Tyne
 * and others contributors as indicated 
 * by the @authors tag. All rights reserved. 
 * See the copyright.txt in the distribution for a
 * full listing of individual contributors. 
 * This copyrighted material is made available to anyone wishing to use,
 * modify, copy, or redistribute it subject to the terms and conditions
 * of the GNU Lesser General Public License, v. 2.1.
 * This program is distributed in the hope that it will be useful, but WITHOUT A 
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
 * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License,
 * v.2.1 along with this distribution; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
 * MA  02110-1301, USA.
 * 
 * (C) 1990-2008,
 */
 /*
 * Copyright (C) 1994
 *
 * Department of Computing Science,
 * The University,
 * Newcastle upon Tyne,
 * UK.
 */

#if defined(NO_INLINES) && !defined(DEBUG_CC_)

extern Dbg_Ostream& operator<< (Dbg_Ostream&, FacilityCode);
extern Dbg_Ostream& operator<< (Dbg_Ostream&, DebugLevel);
extern Dbg_Ostream& operator<< (Dbg_Ostream&, VisibilityLevel);

#else

#ifndef NO_INLINES
#  define INLINEF inline
#else
#  define INLINEF
#endif

INLINEF Dbg_Ostream& DebugController::stream ()
{
    return *dbg_stream;
}

INLINEF int Dbg_Ostream::fac () const
{
    return dbgFac;
}

INLINEF int Dbg_Ostream::lvl () const
{
    return dbgLevel;
}

INLINEF int Dbg_Ostream::vis () const
{
    return dbgVis;
}

INLINEF Dbg_Ostream& operator<<  ( Dbg_Ostream& strm, FacilityCode fac )
{
    strm.set_fac(fac);
    return strm;
}

INLINEF Dbg_Ostream& operator<<  ( Dbg_Ostream& strm, DebugLevel lvl )
{
    strm.set_lvl(lvl);
    return strm;
}

INLINEF Dbg_Ostream& operator<<  ( Dbg_Ostream& strm,  VisibilityLevel vis )
{
    strm.set_vis(vis);
    return strm;
}

#ifdef INLINEF
#  undef INLINEF
#endif

#endif
