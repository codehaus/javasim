/*
 * Copyright 1990-2008, Mark Little, University of Newcastle upon Tyne
 * and others contributors as indicated 
 * by the @authors tag. All rights reserved. 
 * See the copyright.txt in the distribution for a
 * full listing of individual contributors. 
 * This copyrighted material is made available to anyone wishing to use,
 * modify, copy, or redistribute it subject to the terms and conditions
 * of the GNU Lesser General Public License, v. 2.1.
 * This program is distributed in the hope that it will be useful, but WITHOUT A 
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
 * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License,
 * v.2.1 along with this distribution; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
 * MA  02110-1301, USA.
 * 
 * (C) 1990-2008,
 */
 /*
 * Copyright (C) 1994
 *
 * Department of Computing Science,
 * The University,
 * Newcastle upon Tyne,
 * UK.
 */

#ifndef BOOLEAN_H_
#  include <Common/Boolean.h>
#endif


#if defined(NO_INLINES) && !defined(PHISTOGRAM_CC_)

extern ostream& operator<< (ostream& strm, const PrecisionHistogram& ph);

#else

#ifndef NO_INLINES
#  define INLINEF inline
#else
#  define INLINEF
#endif


// the bucket inlines

INLINEF Boolean Bucket::operator== (double value) const
{
    return (Boolean) (name == value);
}

INLINEF Boolean Bucket::operator> (double value) const
{
    return (Boolean) (name > value);
}

INLINEF Boolean Bucket::operator>= (double value) const
{
    return (Boolean) (name >= value);
}

INLINEF Boolean Bucket::operator< (double value) const
{
    return (Boolean) (name < value);
}

INLINEF Boolean Bucket::operator<= (double value) const
{
    return (Boolean) (name <= value);
}

INLINEF double Bucket::operator() () const
{
    return name;
}

INLINEF void Bucket::operator+= (long value)
{
    numberOfEntries += value;
}

INLINEF long Bucket::size () const
{
    return numberOfEntries;
}

INLINEF double Bucket::Name () const
{
    return name;
}

INLINEF Bucket* Bucket::cdr () const
{
    return next;
}

INLINEF void Bucket::setCdr (Bucket* n)
{
    next = n;
}


// the real histogram inlines

INLINEF void PrecisionHistogram::operator+= (double value)
{
    setValue(value);
}

INLINEF long PrecisionHistogram::numberOfBuckets () const
{
    return length;
}

INLINEF Boolean PrecisionHistogram::isPresent (double value)
{
    double dummy = 0.0;
    return sizeByName(value, dummy);  
}

INLINEF ostream& operator<< (ostream& strm, const PrecisionHistogram& ph)
{
    return ph.print(strm);
}


#ifdef INLINEF
#  undef INLINEF
#endif

#endif
