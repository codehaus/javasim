/*
 * Copyright 1990-2008, Mark Little, University of Newcastle upon Tyne
 * and others contributors as indicated 
 * by the @authors tag. All rights reserved. 
 * See the copyright.txt in the distribution for a
 * full listing of individual contributors. 
 * This copyrighted material is made available to anyone wishing to use,
 * modify, copy, or redistribute it subject to the terms and conditions
 * of the GNU Lesser General Public License, v. 2.1.
 * This program is distributed in the hope that it will be useful, but WITHOUT A 
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
 * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License,
 * v.2.1 along with this distribution; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
 * MA  02110-1301, USA.
 * 
 * (C) 1990-2008,
 */
 /*
 * Copyright (C) 1994
 *
 * Department of Computing Science,
 * The University,
 * Newcastle upon Tyne,
 * UK.
 */


#include <math.h>

#if defined(NO_INLINES) && !defined(VARIANCE_CC_)

extern ostream& operator<< (ostream& strm, const Variance& v);

#else

#ifndef NO_INLINES
#  define INLINEF inline
#else
#  define INLINEF
#endif


INLINEF void Variance::operator+= (double value)
{
    setValue(value);
}

INLINEF double Variance::stdDev () const
{
    if (_Number == 0 || variance() <= 0)
	return 0.0;
    else
	return sqrt(variance());
}

INLINEF ostream& operator<< (ostream& strm, const Variance& v)
{
    return v.print(strm);
}

#ifdef INLINEF
#  undef INLINEF
#endif

#endif
