/*
 * Copyright 1990-2008, Mark Little, University of Newcastle upon Tyne
 * and others contributors as indicated 
 * by the @authors tag. All rights reserved. 
 * See the copyright.txt in the distribution for a
 * full listing of individual contributors. 
 * This copyrighted material is made available to anyone wishing to use,
 * modify, copy, or redistribute it subject to the terms and conditions
 * of the GNU Lesser General Public License, v. 2.1.
 * This program is distributed in the hope that it will be useful, but WITHOUT A 
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
 * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License,
 * v.2.1 along with this distribution; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
 * MA  02110-1301, USA.
 * 
 * (C) 1990-2008,
 */
 /*
 * Copyright (C) 1994
 *
 * Department of Computing Science,
 * The University,
 * Newcastle upon Tyne,
 * UK.
 */

The following classes are defined:

    Process	- An abstract class that exports the major functions
		  of the Simula class, process.  To use, derive your own
		  class from the class Process.  The pure virtual function,
		  Body, is the "main" procedure of the class.  Note that,
		  like Simula, a process is not scheduled to run when it is
		  created.  It must be explicitly 'activated'.

    ProcessList	- A list class for processes that (by default) orders
		  the elements by event time.

    ProcessIterator - An iterator class for ProcessList.

    ProcessCons - Allows LISP-like list manipulation (car & cdr).

    Random - A series of classes which provide various random number
	     streams.

    thread - The basic thread class, which defines what operations other
	     threads packages must provide. This is essentially a template
	     which allows other thread packages to be used as long as they
	     provide at least the operations necessary for this class.

    lwp_thread - This is the Sun threads class. [If you have problems with lwp.h
		 then make a local copy of it and remove the definitions of lwp_create
		 etc. from that copy - then edit this source to use your lwp.h].

    gnu_thread - This is the interface to Gnu's thread package.

    cpp_task - This is the interface to the C++ Task library.
